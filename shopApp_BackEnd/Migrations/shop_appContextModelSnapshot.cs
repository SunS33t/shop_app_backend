// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using shopApp_BackEnd.Models;

namespace shopApp_BackEnd.Migrations
{
    [DbContext(typeof(shop_appContext))]
    partial class shop_appContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.16")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("shopApp_BackEnd.Models.Admin", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("User_ID");

                    b.HasKey("UserId")
                        .HasName("XPKAdmin");

                    b.ToTable("Admin");
                });

            modelBuilder.Entity("shopApp_BackEnd.Models.Adress", b =>
                {
                    b.Property<string>("AdressId")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Adress_ID");

                    b.Property<string>("AdditionalInformation")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<int>("HomeNumber")
                        .HasColumnType("int");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)");

                    b.HasKey("AdressId");

                    b.ToTable("Adress");
                });

            modelBuilder.Entity("shopApp_BackEnd.Models.BankAccount", b =>
                {
                    b.Property<long>("CardNumber")
                        .HasColumnType("bigint");

                    b.Property<int?>("Balance")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.HasKey("CardNumber")
                        .HasName("XPKBankAccount");

                    b.ToTable("BankAccount");
                });

            modelBuilder.Entity("shopApp_BackEnd.Models.Color", b =>
                {
                    b.Property<string>("ColorCode")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("ColorName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)");

                    b.HasKey("ColorCode")
                        .HasName("XPKColor");

                    b.ToTable("Color");
                });

            modelBuilder.Entity("shopApp_BackEnd.Models.ColorList", b =>
                {
                    b.Property<string>("ProductId")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Product_ID");

                    b.Property<string>("ColorCode")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("ProductId", "ColorCode")
                        .HasName("XPKColorList");

                    b.HasIndex("ColorCode");

                    b.ToTable("ColorList");
                });

            modelBuilder.Entity("shopApp_BackEnd.Models.Comment", b =>
                {
                    b.Property<string>("CommentId")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Comment_ID");

                    b.Property<DateTime?>("CommentDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CommentText")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("Mark")
                        .HasColumnType("int");

                    b.Property<string>("ProductId")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Product_ID");

                    b.Property<string>("UserId")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("User_ID");

                    b.HasKey("CommentId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("shopApp_BackEnd.Models.Customer", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("User_ID");

                    b.Property<int>("Balance")
                        .HasColumnType("int");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("UserId")
                        .HasName("XPKCustomer");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("shopApp_BackEnd.Models.CustomerCart", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("User_ID");

                    b.Property<string>("ProductId")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Product_ID");

                    b.Property<int?>("Count")
                        .HasColumnType("int");

                    b.HasKey("UserId", "ProductId")
                        .HasName("XPKCustomerCart");

                    b.HasIndex("ProductId");

                    b.ToTable("CustomerCart");
                });

            modelBuilder.Entity("shopApp_BackEnd.Models.Manufacturer", b =>
                {
                    b.Property<string>("ManufacturerId")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Manufacturer_ID");

                    b.Property<byte[]>("BrandLogo")
                        .HasMaxLength(1)
                        .HasColumnType("varbinary(1)");

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.HasKey("ManufacturerId");

                    b.ToTable("Manufacturer");
                });

            modelBuilder.Entity("shopApp_BackEnd.Models.OpeningHour", b =>
                {
                    b.Property<string>("ShopId")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Shop_ID");

                    b.Property<string>("DayOfTheWeek")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<TimeSpan>("CloseTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("OpenTime")
                        .HasColumnType("time");

                    b.HasKey("ShopId", "DayOfTheWeek")
                        .HasName("XPKOpeningHours");

                    b.ToTable("OpeningHours");
                });

            modelBuilder.Entity("shopApp_BackEnd.Models.Order", b =>
                {
                    b.Property<string>("OrderId")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Order_ID");

                    b.Property<string>("AdressId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Adress_ID");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("User_ID");

                    b.HasKey("OrderId");

                    b.HasIndex("AdressId");

                    b.HasIndex("UserId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("shopApp_BackEnd.Models.OrderList", b =>
                {
                    b.Property<string>("ProductId")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Product_ID");

                    b.Property<string>("OrderId")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Order_ID");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "OrderId")
                        .HasName("XPKOrderList");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderList");
                });

            modelBuilder.Entity("shopApp_BackEnd.Models.Product", b =>
                {
                    b.Property<string>("ProductId")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Product_ID");

                    b.Property<int>("Cost")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Difficulty")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("ManufacturerId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Manufacturer_ID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<byte[]>("Picture")
                        .HasMaxLength(1)
                        .HasColumnType("varbinary(1)");

                    b.Property<string>("Size")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<int?>("Weight")
                        .HasColumnType("int");

                    b.HasKey("ProductId");

                    b.HasIndex("ManufacturerId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("shopApp_BackEnd.Models.ProductList", b =>
                {
                    b.Property<string>("ShopId")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Shop_ID");

                    b.Property<string>("ProductId")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Product_ID");

                    b.Property<int?>("Count")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("datetime");

                    b.HasKey("ShopId", "ProductId")
                        .HasName("XPKProductList");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductList");
                });

            modelBuilder.Entity("shopApp_BackEnd.Models.Shop", b =>
                {
                    b.Property<string>("ShopId")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Shop_ID");

                    b.Property<string>("AdressId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Adress_ID");

                    b.Property<string>("ShopName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("Shop_Name");

                    b.HasKey("ShopId");

                    b.HasIndex("AdressId");

                    b.ToTable("Shop");
                });

            modelBuilder.Entity("shopApp_BackEnd.Models.User", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("UserId")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("User_ID");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("shopApp_BackEnd.Models.Admin", b =>
                {
                    b.HasOne("shopApp_BackEnd.Models.User", "User")
                        .WithOne("Admin")
                        .HasForeignKey("shopApp_BackEnd.Models.Admin", "UserId")
                        .HasConstraintName("is_a")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("shopApp_BackEnd.Models.ColorList", b =>
                {
                    b.HasOne("shopApp_BackEnd.Models.Color", "ColorCodeNavigation")
                        .WithMany("ColorLists")
                        .HasForeignKey("ColorCode")
                        .HasConstraintName("R_5")
                        .IsRequired();

                    b.HasOne("shopApp_BackEnd.Models.Product", "Product")
                        .WithMany("ColorLists")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("R_7")
                        .IsRequired();

                    b.Navigation("ColorCodeNavigation");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("shopApp_BackEnd.Models.Comment", b =>
                {
                    b.HasOne("shopApp_BackEnd.Models.Product", "Product")
                        .WithMany("Comments")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("R_34");

                    b.HasOne("shopApp_BackEnd.Models.Customer", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .HasConstraintName("R_35");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("shopApp_BackEnd.Models.Customer", b =>
                {
                    b.HasOne("shopApp_BackEnd.Models.User", "User")
                        .WithOne("Customer")
                        .HasForeignKey("shopApp_BackEnd.Models.Customer", "UserId")
                        .HasConstraintName("is_b")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("shopApp_BackEnd.Models.CustomerCart", b =>
                {
                    b.HasOne("shopApp_BackEnd.Models.Product", "Product")
                        .WithMany("CustomerCarts")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("R_25")
                        .IsRequired();

                    b.HasOne("shopApp_BackEnd.Models.Customer", "User")
                        .WithMany("CustomerCarts")
                        .HasForeignKey("UserId")
                        .HasConstraintName("R_27")
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("shopApp_BackEnd.Models.OpeningHour", b =>
                {
                    b.HasOne("shopApp_BackEnd.Models.Shop", "Shop")
                        .WithMany("OpeningHours")
                        .HasForeignKey("ShopId")
                        .HasConstraintName("R_4")
                        .IsRequired();

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("shopApp_BackEnd.Models.Order", b =>
                {
                    b.HasOne("shopApp_BackEnd.Models.Adress", "Adress")
                        .WithMany("Orders")
                        .HasForeignKey("AdressId")
                        .HasConstraintName("R_29")
                        .IsRequired();

                    b.HasOne("shopApp_BackEnd.Models.Customer", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .HasConstraintName("R_28")
                        .IsRequired();

                    b.Navigation("Adress");

                    b.Navigation("User");
                });

            modelBuilder.Entity("shopApp_BackEnd.Models.OrderList", b =>
                {
                    b.HasOne("shopApp_BackEnd.Models.Order", "Order")
                        .WithMany("OrderLists")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("R_33")
                        .IsRequired();

                    b.HasOne("shopApp_BackEnd.Models.Product", "Product")
                        .WithMany("OrderLists")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("R_31")
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("shopApp_BackEnd.Models.Product", b =>
                {
                    b.HasOne("shopApp_BackEnd.Models.Manufacturer", "Manufacturer")
                        .WithMany("Products")
                        .HasForeignKey("ManufacturerId")
                        .HasConstraintName("R_1")
                        .IsRequired();

                    b.Navigation("Manufacturer");
                });

            modelBuilder.Entity("shopApp_BackEnd.Models.ProductList", b =>
                {
                    b.HasOne("shopApp_BackEnd.Models.Product", "Product")
                        .WithMany("ProductLists")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("R_10")
                        .IsRequired();

                    b.HasOne("shopApp_BackEnd.Models.Shop", "Shop")
                        .WithMany("ProductLists")
                        .HasForeignKey("ShopId")
                        .HasConstraintName("R_8")
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("shopApp_BackEnd.Models.Shop", b =>
                {
                    b.HasOne("shopApp_BackEnd.Models.Adress", "Adress")
                        .WithMany("Shops")
                        .HasForeignKey("AdressId")
                        .HasConstraintName("R_3")
                        .IsRequired();

                    b.Navigation("Adress");
                });

            modelBuilder.Entity("shopApp_BackEnd.Models.User", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithOne()
                        .HasForeignKey("shopApp_BackEnd.Models.User", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("shopApp_BackEnd.Models.Adress", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Shops");
                });

            modelBuilder.Entity("shopApp_BackEnd.Models.Color", b =>
                {
                    b.Navigation("ColorLists");
                });

            modelBuilder.Entity("shopApp_BackEnd.Models.Customer", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("CustomerCarts");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("shopApp_BackEnd.Models.Manufacturer", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("shopApp_BackEnd.Models.Order", b =>
                {
                    b.Navigation("OrderLists");
                });

            modelBuilder.Entity("shopApp_BackEnd.Models.Product", b =>
                {
                    b.Navigation("ColorLists");

                    b.Navigation("Comments");

                    b.Navigation("CustomerCarts");

                    b.Navigation("OrderLists");

                    b.Navigation("ProductLists");
                });

            modelBuilder.Entity("shopApp_BackEnd.Models.Shop", b =>
                {
                    b.Navigation("OpeningHours");

                    b.Navigation("ProductLists");
                });

            modelBuilder.Entity("shopApp_BackEnd.Models.User", b =>
                {
                    b.Navigation("Admin");

                    b.Navigation("Customer");
                });
#pragma warning restore 612, 618
        }
    }
}
